# Your env's name
envName: test.helm

image:
  pullPolicy: IfNotPresent

# The image tag version. It's a good idea to pin it to something specific.
# Avoid using "latest".
avatarVersion: 0.4.12
pdfgeneratorVersion: 0.1.0

# Octopize will provide you with this, it should be base64 encoded.
dockerPullSecret: ""

# Db connection
dbHost: 127.0.0.1
dbPort: "5432"
dbName: "avatar"
dbUsername: "avatar"
# For instance: python -c "import secrets; print(secrets.token_hex(), end='')"
dbPassword: ""

resources:
  apiReplicas: 1
  workerReplicas: 2
  pdfgeneratorReplicas: 1
  workerMemoryRequest: "32Gi"
  apiMemoryRequest: "4Gi"
  pdfgeneratorMemoryRequest: "2Gi"

  workerCpuRequest: "4000m"
  apiCpuRequest: "1000m"
  pdfgeneratorCpuRequest: "1000m"

  workerPreferredNodeType: ""
  apiPreferredNodeType: ""
  pdfgeneratorPreferredNodeType: ""

redisHost: "127.0.0.1"
redisPort: 6379

pdfgeneratorHost: "avatar-pdf"
pdfgeneratorPort: 8001

ingress:
  useGCP: false
  gcp:
    staticIpName: ""
    managedCertificateName: ""

# GCP-specific configuration
gcp:
  useGCP: false
  # For SQL Proxy
  ksaName: ""
  gsaEmail: ""
  dbInstanceConnectionName: ""

debug:
  storage:
    useLocal: false

worker:
  useKedaAutoscaler: false
  scaling:
    maxReplicaCount: 10
    scaledComponents:
      - identifier: "medium"
        preferredNodeType: ""
        memoryRequest: "32Gi"
        queue: "medium"
      - identifier: "huge"
        preferredNodeType: ""
        memoryRequest: "64Gi"
        queue: "huge"


api:
  # Externally accessible API url (should be with https)
  baseUrl: https://avatar.yourcompany.com

  isTelemetryEnabled: true
  isSentryEnabled: true
  logLevel: "INFO"
  deleteFilesUsingCronjob: false

  pepper: TODO   # python -c "import secrets; print(secrets.token_hex(), end='')"
  authjwtSecretKey: TODO   # python -c "import secrets; print(secrets.token_hex(), end='')"
  # python -c "import base64; import os; print(str(base64.urlsafe_b64encode(os.urandom(32)), encoding='utf-8'), end='')"
  fileEncryptionKey: TODO


  # If useEmailAuthentication is true, provide only adminEmail. Else, provide
  # firstUserName and firstUserPassword.
  useEmailAuthentication: false
  organizationName: ""
  adminEmails: 
    - ""
  firstUserName: ""
  firstUserPassword: ""   # python -c "import secrets; print(secrets.token_hex(), end='')"

  # Path to s3:// or gs://
  sharedStoragePath: ""
  
  awsStorageAccountAccessKeyId: ""
  awsStorageAccountSecretAccessKey: ""

  # AWS Mail account used to send mails for password reset
  awsMailAccountAccessKeyId: ""
  awsMailAccountSecretAccessKey: ""

  maxAllowedDimensionsPerDataset: "200"
  maxAllowedLinesPerDataset: "2000000"
  
  workerMediumQueueSizeThreshold: ""
  workerHugeQueueSizeThreshold: ""

  # Clevercloud constant
  clevercloudSsoSalt: ""
