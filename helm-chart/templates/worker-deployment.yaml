apiVersion: apps/v1
kind: Deployment
metadata:
  name: avatar-worker
  labels:
    {{- include "avatar.labels" . | nindent 4 }}
    app.kubernetes.io/component: worker

spec:
  selector:
    matchLabels:
      app.kubernetes.io/component: worker
  replicas: 1
  template:
    metadata:
      labels:
        {{- include "avatar.labels" . | nindent 8 }}
        app.kubernetes.io/component: worker
    spec:
      serviceAccountName: {{ .Values.gcp.ksaName | default "" | quote }}
      containers:
        - name: avatar-worker
          image: quay.io/octopize/api:{{ .Values.avatarVersion }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          volumeMounts:
            - mountPath: /var/run/secrets
              name: secrets
              readOnly: true
          {{ if .Values.debug.storage.useLocal }}
            - mountPath: {{ .Values.api.sharedStoragePath }}
              name: avatar-pv-storage
          {{ end }}
          command: ["celery", "-A", "api.lib.task", "worker", "--loglevel=info"]
          resources:
            requests:
              memory: {{ .Values.resources.workerMemoryRequest }}
              cpu: {{ .Values.resources.workerCpuRequest }}
            limits:
              memory: {{ .Values.resources.workerMemoryRequest }}
              cpu: {{ .Values.resources.workerCpuRequest }}
          env:
            {{- template "avatar.app_env" }}
        {{- template "avatar.db_proxy" . }}
      imagePullSecrets:
        - name: docker-local-pull-secret
      volumes:
        - name: secrets
          secret:
            secretName: api
            # We specifically list only the secrets that are needed in the image
            items:
            - key: db_name
              path: db_name
            - key: db_user
              path: db_user
            - key: db_password
              path: db_password
            - key: file_encryption_key
              path: file_encryption_key
    {{ if .Values.debug.storage.useLocal }}
        - name: avatar-pv-storage
          persistentVolumeClaim:
            claimName: avatar-pv-claim
      securityContext:
        runAsUser: 0
    {{ end }}