version: "3.9"

services:
  api:
    image: quay.io/octopize/api:latest
    volumes:
      - shared:/shared
    restart: on-failure
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 2s
      retries: 3
      start_period: 10s
    environment:
      ENV_NAME: ${ENV_NAME}
      DB_HOST: ${DB_HOST}
      DB_USER: ${DB_USER:-avatar}
      DB_NAME: ${DB_NAME:-avatar}
      DB_PORT: ${DB_PORT:-5432}
      CELERY_BROKER_URL: "redis://redis:6379/0"
      CELERY_RESULT_BACKEND: "redis://redis:6379/1"
      RATELIMIT_REDIS_URL: "redis://redis:6379/2"
      BASE_API_URL: ${BASE_API_URL}
      WEB_CLIENT_URL: ${WEB_CLIENT_URL}
    secrets:
      - db_password
      - pepper
      - authjwt_secret_key
      - file_encryption_key

  worker:
    image: quay.io/octopize/api:latest
    # Note that celery defaults its concurrency to the number of CPUs available
    command: celery -A api.lib.task worker --loglevel=info
    environment:
      ENV_NAME: ${ENV_NAME}
      DB_HOST: ${DB_HOST}
      DB_USER: ${DB_USER:-avatar}
      DB_NAME: ${DB_NAME:-avatar}
      DB_PORT: ${DB_PORT:-5432}
      BASE_API_URL: ${BASE_API_URL}
      CELERY_BROKER_URL: "redis://redis:6379/0"
      CELERY_RESULT_BACKEND: "redis://redis:6379/1"
    depends_on:
      - api
      - redis
    volumes:
      - shared:/shared
    secrets:
      - db_password
      - file_encryption_key

  cron:
    image: quay.io/octopize/api:latest
    command: celery -A api.lib.task beat --loglevel=info
    depends_on:
      - redis
    environment:
      ENV_NAME: ${ENV_NAME}
      BASE_API_URL: ${BASE_API_URL}
      CELERY_BROKER_URL: "redis://redis:6379/0"
      CELERY_RESULT_BACKEND: "redis://redis:6379/1"

  db:
    image: postgres:14.0
    environment:
      POSTGRES_USER: ${DB_USER:-avatar}
      POSTGRES_PASSWORD_FILE: /run/secrets/db_password
    restart: unless-stopped
    secrets:
      - db_password
    volumes:
      - postgres_data:/var/lib/postgresql/data

  redis:
    image: redis:6.2.6-alpine

  caddy:
    image: caddy:2.4.6-alpine
    restart: unless-stopped
    ports:
      - "443:443"
    environment:
      BASE_API_URL: ${BASE_API_URL}
      WEB_CLIENT_URL: ${WEB_CLIENT_URL}
      CADDY_TLS_CONFIG: ${CADDY_TLS_CONFIG}
    volumes:
      - caddy-data:/data
      - caddy-config:/config
      - ./Caddyfile:/etc/caddy/Caddyfile

secrets:
  db_password:
    file: ${SECRETS_DIR-.secrets}/db_password
  pepper:
    file: ${SECRETS_DIR-.secrets}/pepper
  authjwt_secret_key:
    file: ${SECRETS_DIR-.secrets}/authjwt_secret_key
  file_encryption_key:
    file: ${SECRETS_DIR-.secrets}/file_encryption_key

volumes:
  shared:
  caddy-data:
    name: ${DOCKER_VOLUME_NAME_CADDY_DATA:-avatar_caddy_data}
    external: true
  caddy-config:
  postgres_data:
    name: ${DOCKER_VOLUME_NAME_POSTGRES_DATA:-avatar_postgres_data}
    external: true