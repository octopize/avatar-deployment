version: "3.9"

x-logging: &default-logging
  options:
    max-size: "12m"
    max-file: "5"
  driver: json-file

services:
  api:
    image: quay.io/octopize/api:${AVATAR_API_VERSION}
    platform: linux/x86_64
    restart: on-failure
    logging: *default-logging
    volumes:
      - ${HOST_SHARED_STORAGE_PATH}:/home/${CONTAINER_USER_NAME-avatar}/shared # only used for local or on-premise
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 2s
      retries: 3
      start_period: 10s
    environment:
      ENV_NAME: ${ENV_NAME}
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT:-5432}
      TASK_MAX_TIME_LIMIT: ${TASK_MAX_TIME_LIMIT}
      RATELIMIT_REDIS_URL: "redis://redis:6379/2"
      CELERY_BROKER_URL: "redis://redis:6379/0"
      CELERY_RESULT_BACKEND: "redis://redis:6379/1"
      BASE_API_URL: ${BASE_API_URL}
      WEB_CLIENT_URL: ${WEB_CLIENT_URL}
      PDFGENERATOR_URL: "http://pdfgenerator:8000/"
      SHARED_STORAGE_PATH: ${SHARED_STORAGE_PATH} # only specified when using something else than filesystem
      USE_EMAIL_AUTHENTICATION: ${USE_EMAIL_AUTHENTICATION}
      MAX_ALLOWED_DIMENSIONS_PER_DATASET: ${MAX_ALLOWED_DIMENSIONS_PER_DATASET}
      MAX_ALLOWED_LINES_PER_DATASET: ${MAX_ALLOWED_LINES_PER_DATASET}
      IS_TELEMETRY_ENABLED: ${IS_TELEMETRY_ENABLED}
      IS_SENTRY_ENABLED: ${IS_SENTRY_ENABLED}
      USER_ID: ${USER_ID} # user id of the user executing the container

    secrets:
      - db_name
      - db_user
      - db_password
      - organization_name
      - pepper
      - authjwt_secret_key
      - file_encryption_key

      # If using username-email authentication
      - avatar_first_user_name
      - avatar_first_user_password

      # If using email-password authentication
      # - admin_emails
      # - aws_mail_account_access_key_id
      # - aws_mail_account_secret_access_key

      - clevercloud_sso_salt

  worker:
    image: quay.io/octopize/api:latest
    platform: linux/x86_64
    restart: on-failure
    logging: *default-logging
    # celery defaults its concurrency to the number of CPUs available
    command: celery -A api.lib.task worker --loglevel=info
    environment:
      ENV_NAME: ${ENV_NAME}
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT:-5432}
      TASK_MAX_TIME_LIMIT: ${TASK_MAX_TIME_LIMIT}
      CELERY_BROKER_URL: "redis://redis:6379/0"
      CELERY_RESULT_BACKEND: "redis://redis:6379/1"
      BASE_API_URL: ${BASE_API_URL}
      PDFGENERATOR_URL: "http://pdfgenerator:8000/"
      MAX_ALLOWED_DIMENSIONS_PER_DATASET: ${MAX_ALLOWED_DIMENSIONS_PER_DATASET}
      MAX_ALLOWED_LINES_PER_DATASET: ${MAX_ALLOWED_LINES_PER_DATASET}
      IS_TELEMETRY_ENABLED: ${IS_TELEMETRY_ENABLED}
      IS_SENTRY_ENABLED: ${IS_SENTRY_ENABLED}
      USER_ID: ${USER_ID} # user id of the user executing the container
      # SHARED_STORAGE_PATH should only be set when using non-filesystem based storage.
      # It's best to let the API choose the default location for filesystem storage
      # on the container.
      # Where this maps on the host side can be chosen with the HOST_SHARED_STORAGE_PATH
      # environment variable.
      SHARED_STORAGE_PATH: ${SHARED_STORAGE_PATH} # only specified when using something else than filesystem

    depends_on:
      - api
      - redis
    volumes:
      - ${HOST_SHARED_STORAGE_PATH}:/home/${CONTAINER_USER_NAME-avatar}/shared # only used for local or on-premise
    secrets:
      - db_password
      - file_encryption_key
      - db_name
      - db_user

  cron:
    image: quay.io/octopize/api:${AVATAR_API_VERSION}
    platform: linux/x86_64
    restart: on-failure
    logging: *default-logging
    command: celery -A api.lib.task beat --loglevel=info -s /tmp/celerybeat-schedule
    depends_on:
      - redis
    environment:
      ENV_NAME: ${ENV_NAME}
      TASK_MAX_TIME_LIMIT: ${TASK_MAX_TIME_LIMIT}
      RATELIMIT_REDIS_URL: "redis://redis:6379/2"
      CELERY_BROKER_URL: "redis://redis:6379/0"
      CELERY_RESULT_BACKEND: "redis://redis:6379/1"
      BASE_API_URL: ${BASE_API_URL}
      SHARED_STORAGE_PATH: ${SHARED_STORAGE_PATH}
      USER_ID: ${USER_ID} # user id of the user executing the container

  db:
    image: postgres:14.0
    restart: on-failure
    logging: *default-logging
    environment:
      # Appending any env variable with '_FILE' allows the file content to
      # be used to create the database
      POSTGRES_DB_FILE: /run/secrets/db_name
      POSTGRES_USER_FILE: /run/secrets/db_user
      POSTGRES_PASSWORD_FILE: /run/secrets/db_password
    secrets:
      - db_password
      - db_user
      - db_name
    volumes:
      - postgres_data:/var/lib/postgresql/data

  web:
    image: quay.io/octopize/web:${AVATAR_WEB_VERSION}
    profiles: ["with-web"]

  redis:
    image: redis:6.2.6-alpine
    logging: *default-logging

  caddy:
    image: caddy:2.4.6-alpine
    logging: *default-logging
    restart: unless-stopped
    ports:
      - "443:443"
    environment:
      BASE_API_URL: ${BASE_API_URL}
      WEB_CLIENT_URL: ${WEB_CLIENT_URL}
      CADDY_TLS_CONFIG: ${CADDY_TLS_CONFIG}
    volumes:
      - caddy-data:/data
      - caddy-config:/config
      - ./caddy/Caddyfile:/etc/caddy/Caddyfile

  pdfgenerator:
    image: quay.io/octopize/pdfgenerator:${AVATAR_PDFGENERATOR_VERSION}
    logging: *default-logging

secrets:
  db_password:
    file: ${SECRETS_DIR-.secrets}/db_password
  db_user:
    file: ${SECRETS_DIR-.secrets}/db_user
  db_name:
    file: ${SECRETS_DIR-.secrets}/db_name
  pepper:
    file: ${SECRETS_DIR-.secrets}/pepper
  authjwt_secret_key:
    file: ${SECRETS_DIR-.secrets}/authjwt_secret_key
  file_encryption_key:
    file: ${SECRETS_DIR-.secrets}/file_encryption_key
  organization_name:
    file: ${SECRETS_DIR-.secrets}/organization_name

  # If using username-password authentication, you should have the following secrets present
  avatar_first_user_name:
    file: ${SECRETS_DIR-.secrets}/avatar_first_user_name
  avatar_first_user_password:
    file: ${SECRETS_DIR-.secrets}/avatar_first_user_password

  # If using email-password authentication, you should have the following secrets present
  # admin_emails:
  #   file: ${SECRETS_DIR-.secrets}/admin_emails
  # aws_mail_account_access_key_id:
  #   file: ${SECRETS_DIR-.secrets}/aws_mail_account_access_key_id
  # aws_mail_account_secret_access_key:
  #   file: ${SECRETS_DIR-.secrets}/aws_mail_account_secret_access_key

  clevercloud_sso_salt:
    file: ${SECRETS_DIR-.secrets}/clevercloud_sso_salt

volumes:
  caddy-data:
    name: avatar_caddy_data
    external: true
  caddy-config:
  postgres_data:
    name: avatar_postgres_data
    external: true
